// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  // Relationships
  enrollments              Enrollment[]
  userWords                UserWord[]
  readingSessions          ReadingSession[]
  submissions              Submission[]
  quizAttempts             QuizAttempt[]
  vocabularyLists          VocabularyList[]
  userProgress             UserProgress[]
  userSubjectProgress      UserSubjectProgress[]
  bookmarkedArticles       BookmarkedArticle[]
  userReadingPreferences   UserReadingPreferences?
  coursesAsInstructor      Course[]
  createdQuizzes           Quiz[]
  wordLookups              WordLookup[]

}

model Course {
  id           String   @id @default(cuid())
  name         String
  description  String
  category     String   // "news", "culture", "science", "travel", etc
  icon         String?
  color        String?
  difficulty   String   // "beginner", "intermediate", "advanced"
  instructorId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relationships
  instructor           User                     @relation(fields: [instructorId], references: [id])
  enrollments          Enrollment[]
  articles             Article[]
  assignments          Assignment[]
  quizzes              Quiz[]
  userProgress         UserProgress[]
  userSubjectProgress  UserSubjectProgress[]

  @@map("courses")
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  status     String   // "active", "completed", "dropped"
  enrolledAt DateTime @default(now())

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Article {
  id               String   @id @default(cuid())
  title            String
  content          String
  contentWithIPA   String?  // article with IPA annotations
  courseId         String
  difficulty       String
  wordCount        Int
  readingTime      Int
  tags             String[]
  imageUrl         String?
  myLinguaScore    Float?   // 42%, 47%, etc from wireframe
  source           String?  // like здороваться
  publishedAt      DateTime?
  createdAt        DateTime @default(now())

  // Relationships
  course             Course              @relation(fields: [courseId], references: [id])
  readingSessions    ReadingSession[]
  bookmarkedArticles BookmarkedArticle[]

  @@map("articles")
}

model Word {
  id           String   @id @default(cuid())
  word         String   @unique
  translation  String
  definition   String
  partOfSpeech String
  frequency    Int
  examples     String[]
  pronunciation String?
  context      String?

  // Relationships
  userWords            UserWord[]
  wordLookups          WordLookup[]
  vocabularyListWords  VocabularyListWord[]

  @@map("words")
}

model UserWord {
  id              String    @id @default(cuid())
  userId          String
  wordId          String
  status          String    // "unknown", "learning", "known"
  reviewCount     Int       @default(0)
  correctCount    Int       @default(0)
  lastReviewedAt  DateTime?
  learnedAt       DateTime?

  // Relationships
  user User @relation(fields: [userId], references: [id])
  word Word @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
  @@map("user_words")
}

model ReadingSession {
  id                   String    @id @default(cuid())
  userId               String
  articleId            String
  timeSpent            Int       // in seconds
  completionPercentage Float
  wordsLookedUp        Int       @default(0)
  startedAt            DateTime  @default(now())
  completedAt          DateTime?

  // Relationships
  user        User         @relation(fields: [userId], references: [id])
  article     Article      @relation(fields: [articleId], references: [id])
  wordLookups WordLookup[]

  @@map("reading_sessions")
}

model WordLookup {
  id         String   @id @default(cuid())
  userId     String
  wordId     String
  sessionId  String?
  context    String   // sentence where word appeared
  lookedUpAt DateTime @default(now())

  // Relationships
  user    User            @relation(fields: [userId], references: [id])
  word    Word            @relation(fields: [wordId], references: [id])
  session ReadingSession? @relation(fields: [sessionId], references: [id])

  @@map("word_lookups")
}

model Assignment {
  id           String    @id @default(cuid())
  courseId     String
  title        String
  description  String
  type         String    // "reading", "vocabulary", "comprehension"
  requirements Json
  dueDate      DateTime
  maxPoints    Int
  createdAt    DateTime  @default(now())

  // Relationships
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id           String    @id @default(cuid())
  userId       String
  assignmentId String
  responses    Json
  score        Int?
  status       String    // "submitted", "graded", "returned"
  feedback     String?
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?

  // Relationships
  user       User       @relation(fields: [userId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id])

  @@map("submissions")
}

model Quiz {
  id              String   @id @default(cuid())
  courseId        String
  createdByUserId String
  title           String
  type            String   // "vocabulary", "comprehension", "custom"
  questions       Json
  timeLimit       Int?     // in minutes
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())

  // Relationships
  course       Course        @relation(fields: [courseId], references: [id])
  createdBy    User          @relation(fields: [createdByUserId], references: [id])
  quizAttempts QuizAttempt[]

  @@map("quizzes")
}

model QuizAttempt {
  id          String    @id @default(cuid())
  userId      String
  quizId      String
  answers     Json
  score       Int?
  timeSpent   Int       // in seconds
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Relationships
  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])

  @@map("quiz_attempts")
}

model VocabularyList {
  id          String   @id @default(cuid())
  userId      String
  name        String   // "My Politics Words", "Business Terms"
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  user                User                  @relation(fields: [userId], references: [id])
  vocabularyListWords VocabularyListWord[]

  @@map("vocabulary_lists")
}

model VocabularyListWord {
  id      String @id @default(cuid())
  listId  String
  wordId  String
  addedAt DateTime @default(now())

  // Relationships
  list VocabularyList @relation(fields: [listId], references: [id])
  word Word           @relation(fields: [wordId], references: [id])

  @@unique([listId, wordId])
  @@map("vocabulary_list_words")
}

model UserProgress {
  id                 String   @id @default(cuid())
  userId             String
  courseId           String
  wordsKnown         Int      @default(0)
  wordsLearning      Int      @default(0)
  articlesRead       Int      @default(0)
  streakDays         Int      @default(0)
  avgComprehension   Float    @default(0.0)
  lastActiveAt       DateTime @default(now())
  weeklyStats        Json?
  subjectPreferences Json?

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("user_progress")
}

model UserSubjectProgress {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  articlesRead Int       @default(0)
  avgScore     Float     @default(0.0)
  timeSpent    Int       @default(0)
  lastReadAt   DateTime?

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("user_subject_progress")
}

model UserReadingPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  showPopupDictionary  Boolean  @default(true)
  showIPAAboveWords    Boolean  @default(false)
  fontFamily           String   @default("Arial")
  fontSize             Int      @default(16)
  updatedAt            DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("user_reading_preferences")
}

model BookmarkedArticle {
  id           String   @id @default(cuid())
  userId       String
  articleId    String
  notes        String?
  bookmarkedAt DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
  @@map("bookmarked_articles")
}