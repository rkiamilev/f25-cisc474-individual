import { prisma } from "./client";
import { faker } from '@faker-js/faker';
import type { User } from "../generated/client";

const DEFAULT_USERS = [
  // Add your own user to pre-populate the database with
  {
    name: "Tim Apple",
    email: "tim@apple.com",
  },
] as Array<Partial<User>>;

// Russian words with translations for realistic data
const RUSSIAN_WORDS = [
  { word: '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', translation: 'hello (formal)', definition: 'formal greeting', partOfSpeech: 'interjection', pronunciation: 'zdra-stvuy-tye', frequency: 1000 },
  { word: '—Å–ø–∞—Å–∏–±–æ', translation: 'thank you', definition: 'expression of gratitude', partOfSpeech: 'interjection', pronunciation: 'spa-si-bo', frequency: 950 },
  { word: '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', translation: 'please/you\'re welcome', definition: 'polite request or acknowledgment', partOfSpeech: 'adverb', pronunciation: 'po-zha-luy-sta', frequency: 900 },
  { word: '–∏–∑–≤–∏–Ω–∏—Ç–µ', translation: 'excuse me/sorry', definition: 'apology or attention-getting phrase', partOfSpeech: 'verb', pronunciation: 'iz-vi-ni-tye', frequency: 800 },
  { word: '—Ä–∞–±–æ—Ç–∞', translation: 'work/job', definition: 'employment or labor', partOfSpeech: 'noun', pronunciation: 'ra-bo-ta', frequency: 750 },
  { word: '–¥–æ–º', translation: 'house/home', definition: 'dwelling or residence', partOfSpeech: 'noun', pronunciation: 'dom', frequency: 700 },
  { word: '–≤—Ä–µ–º—è', translation: 'time', definition: 'temporal measurement', partOfSpeech: 'noun', pronunciation: 'vre-mya', frequency: 650 },
  { word: '–¥–µ–Ω—å–≥–∏', translation: 'money', definition: 'currency or financial resources', partOfSpeech: 'noun', pronunciation: 'den-gi', frequency: 600 },
  { word: '—Ö–æ—Ä–æ—à–æ', translation: 'good/well', definition: 'positive evaluation', partOfSpeech: 'adverb', pronunciation: 'kho-ro-sho', frequency: 580 },
  { word: '–ø–ª–æ—Ö–æ', translation: 'bad/poorly', definition: 'negative evaluation', partOfSpeech: 'adverb', pronunciation: 'plo-kho', frequency: 500 }
];

// 5 sample Russian articles
const SAMPLE_ARTICLES = [
  {
    title: "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –†–æ—Å—Å–∏–∏",
    content: `–†–æ—Å—Å–∏–π—Å–∫–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã. 
    –ì—Ä–∞–∂–¥–∞–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏ —Å—Ç—Ä–∞–Ω—ã. –í—ã–±–æ—Ä—ã –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç—Å—è, –∏ –≤—Å–µ –≥–æ—Ç–æ–≤—è—Ç—Å—è.
    –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–≤–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ù–∞—Ä–æ–¥ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏.`,
    difficulty: "intermediate",
    source: "rt.com/politics/12345"
  },
  {
    title: "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±–∏–∑–Ω–µ—Å —Å–µ–≥–æ–¥–Ω—è",
    content: `–†–æ—Å—Å–∏–π—Å–∫–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç. –ú–Ω–æ–≥–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –ø—Ä–∏–±—ã–ª—å.
    –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –±–∏–∑–Ω–µ—Å—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. –†—ã–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è.
    –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é—Ç –≤ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã. –†–∞–±–æ—Ç–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π.`,
    difficulty: "beginner",
    source: "rbc.ru/business/67890"
  },
  {
    title: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∂–∏–∑–Ω–∏",
    content: `–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–∑–º–µ–Ω–∏–ª –Ω–∞—à—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å. –ö–æ–º–ø—å—é—Ç–µ—Ä—ã —Å—Ç–∞–ª–∏ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º–∏ –ø–æ–º–ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏.
    –ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–±—â–∞—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –ª—é–¥–µ–π.
    –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ. –ë—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–µ.`,
    difficulty: "intermediate",
    source: "tass.ru/tech/54321"
  },
  {
    title: "–†—É—Å—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏",
    content: `–†–æ—Å—Å–∏—è —Å–ª–∞–≤–∏—Ç—Å—è —Å–≤–æ–∏–º–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏. –ú—É–∑–µ–∏ —Ö—Ä–∞–Ω—è—Ç –±–æ–≥–∞—Ç–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ.
    –¢–µ–∞—Ç—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–¥–æ–≤–∞—Ç—å –∑—Ä–∏—Ç–µ–ª–µ–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º–∏ —Å–ø–µ–∫—Ç–∞–∫–ª—è–º–∏. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫—É–ª—å—Ç—É—Ä—ã.
    –ù–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç —Å–µ–º—å–∏ –∏ –¥—Ä—É–∑–µ–π. –ò—Å–∫—É—Å—Å—Ç–≤–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è.`,
    difficulty: "beginner",
    source: "culture.ru/articles/98765"
  },
  {
    title: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –†–æ—Å—Å–∏–∏",
    content: `–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –†–æ—Å—Å–∏–∏ - —ç—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç. –ö—Ä–∞—Å–∏–≤—ã–µ –≥–æ—Ä–æ–¥–∞ –∂–¥—É—Ç —Ç—É—Ä–∏—Å—Ç–æ–≤.
    –ü—Ä–∏—Ä–æ–¥–∞ –ø–æ—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–∏–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –∏ –∫—Ä–∞—Å–æ—Ç–æ–π. –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ.
    –ú–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è —É–¥–∏–≤–ª—è–µ—Ç –≤–∫—É—Å–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏. –ö–∞–∂–¥—ã–π —Ä–µ–≥–∏–æ–Ω –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.`,
    difficulty: "beginner",
    source: "travel.ru/guide/13579"
  }
];

const COURSE_CATEGORIES = [
  { name: 'Politics', description: 'Political news and discussions', difficulty: 'advanced', icon: 'üèõÔ∏è', color: '#3B82F6' },
  { name: 'Business', description: 'Business and economics content', difficulty: 'intermediate', icon: 'üíº', color: '#10B981' },
  { name: 'Technology', description: 'Tech news and innovation', difficulty: 'intermediate', icon: 'üíª', color: '#8B5CF6' },
  { name: 'Culture', description: 'Russian culture and traditions', difficulty: 'beginner', icon: 'üé≠', color: '#F59E0B' },
  { name: 'Travel', description: 'Travel guides and experiences', difficulty: 'beginner', icon: '‚úàÔ∏è', color: '#EF4444' },
  { name: 'Science', description: 'Scientific discoveries and research', difficulty: 'advanced', icon: 'üî¨', color: '#06B6D4' }
];

// Function to generate fake users
function generateFakeUsers(count: number): Array<{
  name: string;
  email: string;
  role: string;
}> {
  return Array.from({ length: count }, () => ({
    name: faker.person.fullName(),
    email: faker.internet.email(),
    role: faker.helpers.arrayElement(['instructor', 'student'])
  }));
}

// Add this function to your existing seed.ts main() function
async function seedArticles(courses: any[]) {
  console.log('üì∞ Creating sample Russian articles...');
  const articles = [];
  
  for (const articleData of SAMPLE_ARTICLES) {
    // Find the corresponding course by category
    const course = courses.find(c => c.title.includes(articleData));
    
    const article = await prisma.article.create({
      data: {
        title: articleData.title,
        content: articleData.content,
        difficulty: articleData.difficulty,
        wordCount: articleData.content.split(/\s+/).length,
        readingTime: Math.ceil(articleData.content.split(/\s+/).length / 150), // ~150 words per minute
        source: `https://${articleData.source}`,
        publishedAt: faker.date.past({ years: 0.5 }), // Fixed: use years instead of months
        createdAt: faker.date.past({ years: 0.5 }), // Fixed: use years instead of months
      }
    });
    articles.push(article);
  }
  
  console.log(`‚úÖ Created ${articles.length} Russian articles`);
  return articles;
}

// Helper function to transliterate Russian to Latin
function transliterateWord(russianWord: string): string {
  const transliterationMap: { [key: string]: string } = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  return russianWord.toLowerCase().split('').map(char => 
    transliterationMap[char] || char
  ).join('');
}

// Generate example sentences using the word
function generateExamples(word: string): string[] {
  return [
    `–ü—Ä–∏–º–µ—Ä —Å —Å–ª–æ–≤–æ–º ${word}.`,
    `–î—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä —Å ${word}.`
  ];
}

// Function to seed users
async function seedUsers() {
  console.log('üå± Seeding users...');
  const users = generateFakeUsers(100); 
  
  for (const userData of users) {
    await prisma.user.upsert({
      where: { email: userData.email! }, 
      update: userData,
      create: userData,
    });
  }
  console.log(`‚úÖ ${users.length} users with fake emails seeded successfully`);
}

// Function to seed words
async function seedWords() {
  console.log('üå± Seeding Russian words...');
  
  // Use the expanded word list
  const wordsData = RUSSIAN_WORDS.map(word => ({
    word: word.word,                    // "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" ‚Üí word field
    translation: word.translation,      // "hello (formal)" ‚Üí translation field
    definition: word.definition,        // "formal greeting" ‚Üí definition field
    partOfSpeech: word.partOfSpeech,   // "interjection" ‚Üí partOfSpeech field
    transcription: word.pronunciation,  // "zdra-stvuy-tye" ‚Üí transcription field
    transliteration: transliterateWord(word.word),
    frequency: word.frequency,
    examples: generateExamples(word.word),
    // grammaticalForms: generateGrammaticalForms(word.word, word.partOfSpeech),
  }));

}

// Main seed function
async function main() {
  // Create Users using Faker.js Person API
  console.log('üë§ Creating users with Faker.js Person API...');
  const users: Array<User & { role: 'instructor' | 'student' }> = [];

  // Generate and create users
  const userData = generateFakeUsers(15); // Generate 15 users
  
  for (const user of userData) {
    const createdUser = await prisma.user.create({
      data: {
        name: user.name,
        email: user.email,
        role: user.role,
        emailVerified: new Date(),
      }
    });
    users.push(createdUser as User & { role: 'instructor' | 'student' });
  }

  console.log(`‚úÖ Created ${users.length} users using Faker.js Person API`);

  // Create Articles (simplified - no courses needed for basic 3-table setup)
    console.log('üì∞ Creating sample Russian articles...');
    const articles = [];
    
    for (const articleData of SAMPLE_ARTICLES) {
      const article = await prisma.article.create({
        data: {
          title: articleData.title,
          content: articleData.content,
          difficulty: articleData.difficulty,
          wordCount: articleData.content.split(/\s+/).length,
          readingTime: Math.ceil(articleData.content.split(/\s+/).length / 150),
          source: `https://${articleData.source}`,
          publishedAt: faker.date.past({ years: 0.5 }),
          createdAt: faker.date.past({ years: 0.5 }),
        }
      });
      articles.push(article);
    }
    
    console.log(`‚úÖ Created ${articles.length} Russian articles`);

  // Create Words (Russian vocabulary)
  console.log('üìö Creating Russian vocabulary...');
  const words = [];
  console.log(RUSSIAN_WORDS);
  for (const wordData of RUSSIAN_WORDS) {
    const word = await prisma.word.create({
      data: {
        word: wordData.word,
        translation: wordData.translation,
        definition: wordData.definition,
        partOfSpeech: wordData.partOfSpeech,
        frequency: wordData.frequency,
        examples: [
          `${wordData.word} - –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º.`,
          `Example: ${wordData.translation} used in context.`
        ],
        pronunciation: wordData.pronunciation
      }
    });
    words.push(word);
  }

  // Add more generated Russian-like words
  for (let i = 0; i < 85; i++) {
    const word = await prisma.word.create({
      data: {
        word: faker.lorem.word() + faker.helpers.arrayElement(['—ã–π', '–æ–π', '–∏–π', '–∞—è', '–æ–µ', '–∞—Ç—å', '–∏—Ç—å', '–µ—Ç—å']),
        translation: faker.word.words({ count: { min: 1, max: 3 } }),
        definition: faker.lorem.sentence(),
        partOfSpeech: faker.helpers.arrayElement(['noun', 'verb', 'adjective', 'adverb', 'preposition']),
        frequency: faker.number.int({ min: 1, max: 1000 }),
        examples: [faker.lorem.sentence(), faker.lorem.sentence()],
        pronunciation: faker.word.sample()
      }
    });
    words.push(word);
  }

  console.log(`‚úÖ Created ${words.length} words (${RUSSIAN_WORDS.length} authentic Russian + ${words.length - RUSSIAN_WORDS.length} generated)`);

  // Print detailed summary
    const summary = {
      users: await prisma.user.count(),
      articles: await prisma.article.count(),
      words: await prisma.word.count()
    };

    console.log('\nüìä Complete Database Summary:');
    Object.entries(summary).forEach(([table, count]) => {
      console.log(`   ${table}: ${count}`);
    });
    
    console.log('\nüéØ Your Russian Language Learning LMS is fully seeded and ready!');
}

// (async () => {
//   try {
//     await Promise.all(
//       DEFAULT_USERS.map((user) =>
//         prisma.user.upsert({
//           where: {
//             email: user.email!,
//           },
//           update: {
//             ...user,
//           },
//           create: {
//             ...user,
//           },
//         })
//       )
//     );
//   } catch (error) {
//     console.error(error);
//     process.exit(1);
//   } finally {
//     await prisma.$disconnect();
//   }
// })();

// Execute the seed function

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });